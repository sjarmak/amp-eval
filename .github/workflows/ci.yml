name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.10"

jobs:
  lint-and-test:
    name: "Stage 1: Lint + Unit Tests"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Lint with ruff
        run: |
          ruff check .
          ruff format --check .
          
      - name: Type check with mypy
        run: mypy src/ adapters/ --ignore-missing-imports
        
      - name: Run unit tests with coverage
        run: |
          pytest tests/ --cov=src --cov=adapters --cov-report=xml --cov-report=term
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  smoke-evaluation:
    name: "Stage 2: Smoke Evaluation"
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      AMP_MODEL: sonnet-4
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run smoke tests (3 smallest tasks)
        run: |
          # Create smoke evaluation subset
          python scripts/create_smoke_eval.py
          
          # Run smoke evaluation
          python run_baseline.py --eval smoke --model sonnet-4 --output results/smoke-$(date +%Y-%m-%d).json
          
      - name: Upload smoke test results
        uses: actions/upload-artifact@v3
        with:
          name: smoke-results-${{ github.sha }}
          path: results/smoke-*.json
          retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Bandit security scan
        run: |
          pip install bandit[toml]
          bandit -r src/ adapters/ -f json -o bandit-report.json
          
      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-${{ github.sha }}
          path: bandit-report.json
