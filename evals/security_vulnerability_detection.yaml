# Security Vulnerability Detection Evaluation
# Tests ability to identify and fix security vulnerabilities

name: security_vulnerability_detection
description: "Evaluates security vulnerability detection including SQL injection, path traversal, XSS, and authentication bypasses"

eval_type: security
registry_path: amp-eval/adapters
runner: amp_runner

dataset:
  - prompt: "Fix the SQL injection vulnerability in tasks/repos/security/sql_vulnerable.py - user input is directly concatenated into queries"
    workspace: "tasks/repos/security"
    test_command: "pytest tests/test_sql_vulnerable.py -q"
    security_check: "bandit sql_vulnerable.py"
    expected_files_modified: ["sql_vulnerable.py"]
    vulnerability_type: "sql_injection"
    id: "fix_sql_injection"
    difficulty: "medium"
    
  - prompt: "Secure the file upload handler in tasks/repos/security/file_upload.py - it's vulnerable to path traversal attacks"
    workspace: "tasks/repos/security"
    test_command: "pytest tests/test_file_upload.py -q"
    security_check: "bandit file_upload.py && python security_tests/path_traversal_test.py"
    expected_files_modified: ["file_upload.py"]
    vulnerability_type: "path_traversal"
    id: "fix_path_traversal"
    difficulty: "medium"
    
  - prompt: "Fix the XSS vulnerability in tasks/repos/security/web_app.py - user input is not properly escaped in HTML output"
    workspace: "tasks/repos/security"
    test_command: "pytest tests/test_web_app.py -q"
    security_check: "python security_tests/xss_test.py"
    expected_files_modified: ["web_app.py"]
    vulnerability_type: "xss"
    id: "fix_xss_vulnerability"
    difficulty: "medium"
    
  - prompt: "Fix the authentication bypass in tasks/repos/security/auth_handler.py - JWT tokens are not properly validated"
    workspace: "tasks/repos/security"
    test_command: "pytest tests/test_auth_handler.py -q"
    security_check: "python security_tests/auth_bypass_test.py"
    expected_files_modified: ["auth_handler.py"]
    vulnerability_type: "auth_bypass"
    id: "fix_auth_bypass"
    difficulty: "hard"
    
  - prompt: "Secure the command execution in tasks/repos/security/command_runner.py - it's vulnerable to command injection"
    workspace: "tasks/repos/security"
    test_command: "pytest tests/test_command_runner.py -q"
    security_check: "bandit command_runner.py && python security_tests/command_injection_test.py"
    expected_files_modified: ["command_runner.py"]
    vulnerability_type: "command_injection"
    id: "fix_command_injection"
    difficulty: "hard"
    
  - prompt: "Fix the insecure deserialization in tasks/repos/security/data_processor.py - it uses pickle without validation"
    workspace: "tasks/repos/security"
    test_command: "pytest tests/test_data_processor.py -q"
    security_check: "bandit data_processor.py && python security_tests/deserialization_test.py"
    expected_files_modified: ["data_processor.py"]
    vulnerability_type: "insecure_deserialization"
    id: "fix_insecure_deserialization"
    difficulty: "hard"

scoring:
  method: "security_fix_quality"
  criteria:
    - vulnerability_fixed: 60     # 60% if vulnerability is actually fixed
    - tests_pass: 20              # 20% if functionality preserved
    - security_scan_clean: 15     # 15% if security tools pass
    - no_new_vulnerabilities: 5   # 5% if no new issues introduced
  
  pass_threshold: 80  # Higher threshold for security
  max_attempts: 2

grading_template: |
  Security vulnerability fix evaluation for {id}:
  Vulnerability type: {vulnerability_type}
  Difficulty: {difficulty}
  
  Functionality:
  Test command: {test_command}
  Test result: {test_status}
  
  Security validation:
  Security check: {security_check}
  Security result: {security_status}
  Vulnerability fixed: {vulnerability_fixed}
  
  Files modified: {files_modified}
  Expected: {expected_files_modified}
  
  Security analysis:
  - Original vulnerability: {original_vulnerability}
  - Fix approach: {fix_approach}
  - Residual risk: {residual_risk}
  - New vulnerabilities: {new_vulnerabilities}
  
  Score: {score}/100
  
  Security check output:
  {security_output}
  
  Test output:
  {test_output}

metadata:
  model_tags: ["security", "vulnerability", "penetration_testing"]
  timeout_seconds: 180
  workspace_setup: "copy_repo_templates"
  requires_security_tools: true
  security_tools: ["bandit", "safety", "semgrep"]
